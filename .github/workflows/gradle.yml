# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    ## create application-database.yml
    - name: make application-database.yml
      run: |
        ## create application-database.yml
        cd ./src/main/resources

        # application-database.yml 파일 생성
        touch ./application-database.yml

        # GitHub-Actions 에서 설정한 값을 application-database.yml 파일에 쓰기
        echo "${{ secrets.DATABASE }}" >> ./application-database.yml
      shell: bash

    ## create application-oauth2.yml
    - name: make application-oauth2.yml
      run: |
        ## create application-oauth2.yml
        cd ./src/main/resources

        # application-oauth2.yml 파일 생성
        touch ./application-oauth2.yml

        # GitHub-Actions 에서 설정한 값을 application-oauth2.yml 파일에 쓰기
        echo "${{ secrets.OAUTH2 }}" >> ./application-oauth2.yml
      shell: bash

    ## gradle chmod
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
      
    ## gradle build
    - name: Build with Gradle
      run: ./gradlew bootJar

    ## 웹 이미지 빌드 및 도커허브에 push
    - name: web docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-web .
        docker push ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-web

  deploy-scp-action:
    runs-on : ubuntu-latest
    steps:
      - name : deploy action
        uses: marcodallasanta/ssh-scp-deploy@v1.2.0
        with:
          local: ./docker-compose.yml                                                  # Local file path - REQUIRED false - DEFAULT ./
          remote: ~/home/ubuntu/dockerfiles                                                 # Remote file path - REQUIRED false - DEFAULT ~/
          host: ${{secrets.HOST}}                                      # Remote server address - REQUIRED true
          ##port: ${{secrets.PORT}}                                      # Remote server port - REQUIRED false - DEFAULT 22
          user: ${{secrets.AWS_USER}}                                      # Remote server user - REQUIRED true
          ##password: ${{secrets.PASSWORD}}                              # User password - REQUIRED at least one of "password" or "key" 
          key: ${{secrets.KEY}}                                        # Remote server private key - REQUIRED at least one of "password" or "key" 
          ##pre_upload: echo "This will be executed before the upload!"  # Command to run via ssh before scp upload - REQUIRED false
          ##post_upload: echo "This will be executed after the upload!"  # Command to run via ssh after scp upload - REQUIRED false
          ##ssh_options: -o StrictHostKeyChecking=no                     # A set of ssh_option separated by -o - REQUIRED false - DEFAULT -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
          ##scp_options: -v                                              # Flags to use during scp - REQUIRED false - DEFAULT ''
          
  ## docker compose up
  docker-compose-up:
    runs-on : ubuntu-latest
    steps:        
        - uses: actions/checkout@master        
        - name: executing remote ssh commands using password
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ubuntu
            key: ${{ secrets.KEY }}
            script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-web:latest
              sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-nginx:latest
              sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-redis:v1
              sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-mysql:v1                          
              docker-compose up -d
              docker image prune -f
      

           
