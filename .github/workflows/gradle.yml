# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MYSQL_USER: ${{secrets.AWS_USER}}
      MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}
      MYSQL_DATABASE: "squadmania"
        
    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    ## create application-database.yml
    - name: make application-database.yml
      run: |
        ## create application-database.yml
        cd ./src/main/resources

        # application-database.yml 파일 생성
        touch ./application-database.yml

        # GitHub-Actions 에서 설정한 값을 application-database.yml 파일에 쓰기
        echo "${{ secrets.DATABASE }}" >> ./application-database.yml
      shell: bash

    ## create application-oauth2.yml
    - name: make application-oauth2.yml
      run: |
        ## create application-oauth2.yml
        cd ./src/main/resources

        # application-oauth2.yml 파일 생성
        touch ./application-oauth2.yml

        # GitHub-Actions 에서 설정한 값을 application-oauth2.yml 파일에 쓰기
        echo "${{ secrets.OAUTH2 }}" >> ./application-oauth2.yml
      shell: bash

    - name: MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        mysql user: ${{ env.AWS_USER }}
        mysql password: ${{ env.MYSQL_ROOT_PASSWORD }}
        mysql database: ${{ env.MYSQL_DATABASE }}
        mysql version: "latest"
      
    - name: Modify docker compose
      run: |
        sed -i "s/MYSQL_USER=.*/MYSQL_USER=${{ secrets.AWS_USER }}/" docker-compose.yml
        sed -i "s/MYSQL_ROOT_PASSWORD=.*/MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}/" docker-compose.yml
      shell: bash
      
    ## gradle chmod
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
      
    ## gradle build
    - name: Build with Gradle
      run: ./gradlew bootJar

    ## 웹 이미지 빌드 및 도커허브에 push
    - name: web docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-web .
        docker push ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-web


  scp-action:
    needs: build
    name: scp action
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: copy file via ssh password
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.AWS_USER }}
        key : ${{ secrets.KEY }}
        source: "docker-compose.yml"
        target: /home/ubuntu/dockerfiles
          
  ## docker compose up
  docker-compose-up:
    needs : scp-action
    runs-on : ubuntu-latest
    steps:        
        - uses: actions/checkout@master        
        - name: executing remote ssh commands using password
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ubuntu
            key: ${{ secrets.KEY }}
            script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-web:latest
              sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-nginx:latest
              sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-redis:v1
              sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-mysql:v1
              cd dockerfiles
              docker-compose up -d
              docker image prune -f
