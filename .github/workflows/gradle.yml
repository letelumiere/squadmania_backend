# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - name: checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    ## create application-database.yml
    - name: make application-database.yml
      run: |
        ## create application-database.yml
        cd ./src/main/resources

        # application-database.yml 파일 생성
        touch ./application-database.yml

        # GitHub-Actions 에서 설정한 값을 application-database.yml 파일에 쓰기
        echo "${{ secrets.DATABASE }}" >> ./application-database.yml
      shell: bash

    ## create application-oauth2.yml
    - name: make application-oauth2.yml
      run: |
        ## create application-oauth2.yml
        cd ./src/main/resources

        # application-oauth2.yml 파일 생성
        touch ./application-oauth2.yml

        # GitHub-Actions 에서 설정한 값을 application-oauth2.yml 파일에 쓰기
        echo "${{ secrets.OAUTH2 }}" >> ./application-oauth2.yml
      shell: bash

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew bootJar

    ## 웹 이미지 빌드 및 도커허브에 push
    - name: web docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth .
        docker push ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth
        
  cd-pipeline:
    name: continuos deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          port: 22
          source: "docker-compose.yaml"
          target: "/home/ubuntu/"
    ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-web
            sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-nginx
            sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-redis
            sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/squadmania-auth-mysql
            docker-compose up -d
            docker image prune -f
